using DataStructures.LeetCode.Array;
using Xunit;

namespace DataStructures.LeetCode.Tests.Array;

public class ValidSudokuTest
{
    [Theory]
    [InlineData(true,
        new[] { '5', '3', '.', '.', '7', '.', '.', '.', '.' },
        new[] { '6', '.', '.', '1', '9', '5', '.', '.', '.' },
        new[] { '.', '9', '8', '.', '.', '.', '.', '6', '.' },
        new[] { '8', '.', '.', '.', '6', '.', '.', '.', '3' },
        new[] { '4', '.', '.', '8', '.', '3', '.', '.', '1' },
        new[] { '7', '.', '.', '.', '2', '.', '.', '.', '6' },
        new[] { '.', '6', '.', '.', '.', '.', '2', '8', '.' },
        new[] { '.', '.', '.', '4', '1', '9', '.', '.', '5' },
        new[] { '.', '.', '.', '.', '8', '.', '.', '7', '9' })]
    [InlineData(false,
        new[] { '8', '3', '.', '.', '7', '.', '.', '.', '.' },
        new[] { '6', '.', '.', '1', '9', '5', '.', '.', '.' },
        new[] { '.', '9', '8', '.', '.', '.', '.', '6', '.' },
        new[] { '8', '.', '.', '.', '6', '.', '.', '.', '3' },
        new[] { '4', '.', '.', '8', '.', '3', '.', '.', '1' },
        new[] { '7', '.', '.', '.', '2', '.', '.', '.', '6' },
        new[] { '.', '6', '.', '.', '.', '.', '2', '8', '.' },
        new[] { '.', '.', '.', '4', '1', '9', '.', '.', '5' },
        new[] { '.', '.', '.', '.', '8', '.', '.', '7', '9' })]
    public void Verify_Test(bool expected, params char[][] board)
    {
        var result = ValidSudoku.Verify(board);
        
        Assert.Equal(expected, result);
    }
}